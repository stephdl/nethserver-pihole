#!/usr/bin/bash

bridgeAeria=$(/sbin/e-smith/config getprop docker bridgeAeria)
macVlanNic=$(/sbin/e-smith/config getprop docker macVlanNic)
piholeNetwork=$(/sbin/e-smith/config getprop pihole piholeNetwork)
piholeMacVlanIP=$(/sbin/e-smith/config getprop pihole piholeMacVlanIP)

if [[ ${piholeNetwork} == 'aeria' ]];then
    if [[ -z ${bridgeAeria} ]]; then
        echo "# Bridge for aeria doesn't exist"
        exit 0
    fi
    HasNetwork=$(docker network ls -f name=aeria -q)
    if [[ $? != 0 ]]; then
        exit 1
    fi

    if [[ -z ${HasNetwork} ]]; then
        echo "# Aeria doesn't exist"
        exit 0
    fi
elif [[ ${piholeNetwork} == 'macvlan' ]];then
    if [[ -z ${macVlanNic} ]]; then
        echo "# Bridge for macvlan doesn't exist"
        exit 0
    fi
    HasNetwork=$(docker network ls -f name=macvlan -q)
    if [[ $? != 0 ]]; then
        exit 1
    fi

    if [[ -z ${HasNetwork} ]]; then
        echo "# Macvlan doesn't exist"
        exit 0
    fi
else
    exit 0
fi

HasPihole=$(docker ps -f name=pihole -q -a)
if [[ $? != 0 ]]; then
    exit 1
fi

if [[ -n ${HasPihole} ]]; then
    echo "# Pihole already exists"
    exit 0
fi

timezone=$(/sbin/e-smith/config getprop pihole timezone)
password=$(/sbin/e-smith/config getprop pihole password)
DNS1=$(/sbin/e-smith/config getprop pihole DNS1)
DNS2=$(/sbin/e-smith/config getprop pihole DNS2)
mac=$(/sbin/e-smith/config getprop pihole mac)

if [[ -z ${mac} ]]; then
    mac=00:60:2f$(od -txC -An -N3 /dev/random|tr \  :)
    /sbin/e-smith/config setprop pihole mac $mac
fi

if [[ ${piholeNetwork} == 'aeria' ]];then
docker run -d --name pihole \
    -v "/var/lib/pihole/etc-pihole/:/etc/pihole/" \
    -v "/var/lib/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/" \
    -e TZ="$timezone" \
    -e WEBPASSWORD="$password"  \
    --hostname pi.hole \
    -e VIRTUAL_HOST="pi.hole" \
    -e IPv6="false" \
    -e dns="127.0.0.1" \
    -e dns="1.1.1.1" \
    -e DNS1="${DNS1}#53" \
    -e DNS2="${DNS2}#53" \
    -e DNSMASQ_LISTENING="local" \
    --cap-add NET_ADMIN \
    --net=$piholeNetwork --mac-address=$mac \
    --restart=unless-stopped \
    pihole/pihole:latest

elif [[ ${piholeNetwork} == 'macvlan' ]];then
docker run -d --name pihole \
    -v "/var/lib/pihole/etc-pihole/:/etc/pihole/" \
    -v "/var/lib/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/" \
    -e TZ="$timezone" \
    -e WEBPASSWORD="$password"  \
    --hostname pi.hole \
    -e VIRTUAL_HOST="pi.hole" \
    -e IPv6="false" \
    -e dns="127.0.0.1" \
    -e dns="1.1.1.1" \
    -e DNS1="${DNS1}#53" \
    -e DNS2="${DNS2}#53" \
    -e DNSMASQ_LISTENING="local" \
    --cap-add NET_ADMIN \
    --ip=$piholeMacVlanIP \
    --net=$piholeNetwork \
    --restart=unless-stopped \
    pihole/pihole:latest
fi
